clc;
clear all;

% cost=[2 10 4 5;6 12 8 11;3 9 5 7];   %yaa toh negative daal dooo yaa fir inme seee sabse negative walle koo nikalo and usbtract kar doo har mai seeee.
% a=[12 25 20]; %supplies
% b=[25 10 15 5]; % demand

cost=[3 11 4 14 15;6 16 18 2 28;10 13 15 19 17;7 12 5 8 9];
a=[15 25 10 15]; %supplies
b=[20 10 15 15 5]; % demand


% check balanced or unbalanced
if sum(a)==sum(b)
    fprintf('Balanced\n');
else
    fprintf("Unbalanced\n")
   if sum(a)<sum(b)
        cost(end+1,:)=zeros(1,size(b,2));
        a(end+1)=sum(b)-sum(a);
   else
        cost(:,end+1)=zeros(size(a,2),1);
        b(end+1)=sum(a)-sum(b);
    end
end


icost=cost;
x=zeros(size(cost));
[m,n]=size(cost);
bfs=m+n-1;


for i=1:size(cost,1) %row wise chalega
    for j=1:size(cost,2) % column wise chalega

 hh=min(cost(:));%minimum cost

[row_index,col_index]=find(hh==cost); % cell with min cost

x11=min(a(row_index),b(col_index));

[val,ind]=max(x11); % finding max allocation for tie...
%c=[val,ind];
 %disp(c);
ii=row_index(ind); % row position
jj=col_index(ind); % col position
y11=min(a(ii),b(jj)); % find the value

x(ii,jj)=y11; % assign allocation
a(ii)=a(ii)-y11; % reduce row value
b(jj)=b(jj)-y11; % reduce column value
cost(ii,jj)=inf; % cell visited,so that this cost does not gets selected again
    end
end


%print the initabfs
fprintf('Initial BFS: \n');
ib=array2table(x);
disp(ib);

totalbfs=length(nonzeros(x));



if totalbfs == bfs
    fprintf('Non-Degenerate BFS \n');
else
    fprintf('Degenerate BFS \n');
end


initialcost=sum(sum(icost.*x));
fprintf('Cost = %d\n',initialcost);
